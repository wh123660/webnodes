1、css概述 
   1、html 控制样式的弊端
      1、相同的样式效果，通过不同的属性 来完成的
         <body text="">
	 <font color="">
      2、程序 可维护性 不高
   2、通过 CSS 解决上述问题
      可以让 各个元素 都使用统一的 样式声明 从而提高程序的可重用性和可为维护性

   3、什么是CSS
      CSS ：Cascading Style Sheet ,层叠样式表、级联样式表，简称为 样式表

      作用：为 html 元素 去定义样式
         能够实现 内容与表现相分离
	 提高程序的可重用性 和  可维护性
	 重用性：可以让多个元素 使用相同的样式
	 维护性：一个元素的样式改变，其他元素也可以跟着变
   4、HTML 与 CSS 之间的关系
      HTML 主要负责显示内容
      CSS 主要负责样式的定义
      一个完整的页面 = HTML + CSS

      W3C建议尽量使用CSS样式 取代 HTML 属性
   5、CSS样式表的使用
      1、使用方式
         1、内联方式
	    也称为 ：内联样式 、行内样式
	    将样式定义在HTML元素中
	    特点：只能控制某一个元素的显示效果
	    语法:<标记 style="样式属性:值;样式属性:值;"></标记>
	       常用属性：
	         color : 文本颜色，取值 表示颜色的英文单词
		 style="color:red;"

		 background-color : 背景颜色
		 style="background-color:green;"
		 style="color:red;background-color:green;"
		 
		 font-size : 字体大小，取值 以px为单位
		 style="font-size:20px"
	 2、内部样式表
	    将所有的样式内容 放在 <head></head>中的 <style></style>元素内
	    <style></style>中 添加 若干 "样式规则"
	    样式规则：对一套 样式的 完整描述,主要包含两部分
	        1、哪些标记允许使用定义好的样式 - 选择器
		2、样式内容 - 若干样式声明

            样式规则语法：
	      选择器{
		//样式声明
		样式属性:值;
		样式属性:值;
		...........
	      }
	    
	    选择器：通过 标记 的名称来表示选择器，相当于定义该标记的样式
	    div{
		color:red;
		background-color:green;
		font-size:48px;
	    }

	    p{
		color:blue;
		font-size:24px;
	    }
	   特点：
	      1、能够实现 内容与表现相分离
	      2、提升了 样式的可重用性和可维护性
	      3、只能在一个页面中做通用样式定义
	 3、外部样式表
	    将样式规则 保存在独立的 样式文件中，由页面对样式文件进行引用
	    特点：
	        1、实现 内容与表现相分离
		2、将可重用性 和 可维护性 体现的 最完美(所有的页面都能用)
		3、可以在整个网站乃至于互联网中做通用的样式定义
	    步骤：
	       1、创建一个 样式表文件
	          纯文本文件，以 .css 结尾

		  该文件中，只能包含样式规则
	       2、在页面中，对样式表文件进行引用
	          在 <head></head>中 增加以下代码
		  <link rel="stylesheet" type="text/css" href="链接的css文件地址" />
2、CSS语法规范
   1、基本语法
      样式声明：  属性:值;
      样式规则：  选择器 和 样式声明
   2、CSS样式表特征
      1、继承性
         大部分的CSS样式属性，是可以被继承的

	 继承：子级不用单独定义样式，可以直接父级的东西
      2、层叠性
         为一个元素定义多个样式的时候
	 样式不冲突时，多个样式表中的样式可以层叠(合并)为一个
      3、优先级
         样式冲突时，按照不同样式规则的优先级来应用样式

	 优先级：
	 1、浏览器默认设置 (User Agent Style) ,级别最低
	 2、内部样式表 或 外部样式表,级别 处于中间位置
	    就近原则 
	 3、内联样式 ,级别 最高


	 Unknown property name : 样式属性名称写错了
	 Invalid property value : 样式属性值写错了
      4、!important规则
         
	 可以通过 !important 显示调整样式优先级，!important优先级最高
	 语法： 样式属性:属性值 !important;

	 谨慎使用

3、CSS基础选择器
   1、选择器的作用
      规范了页面中的 哪些元素 能够使用定义好的样式
      p{
	color:red;
      }
      div{
	font-size:12px;
      }
   2、选择器(重点)
      1、通用选择器
         作用：匹配页面中所有的元素
	 语法：*
	 eg:
	 *{
		font-size:12px;
	 }
	 在页面会会匹配多次

	 body{
		font-size:12px;
	 }
	 在页面上只匹配一次，其余都是继承，效率较高

	 注意：能不用就不用
      2、元素选择器
         作用：定义/修改特定 "标记" 的默认样式
	 语法：标记名称作为选择器
	 别名：标签选择器、标签样式
	 eg:
	   div{
	      ....
	   }
	   p{
	      ....
	   }
	   ul{
	      ....
	   }
      3、类选择器
         作用：定义公共样式，可以由其他标记灵活引用
	 语法：.className
	 使用：通过标签的class属性对className进行引用
	 别名：类样式
	 注意：
		1、className 不能以数字开头
		2、如果一个标记向同时引用多个类的话，中间用 空格 区分
	 eg:
	   .redBack{
		background-color:red;
	   }

	   <div class="redBack"></div>
	   <div></div>

      4、类选择器 - 分类选择器
         作用：将类选择器 和 元素选择器结合到一起，从而实现对某种元素中不同样式的细分控制,其目的是缩小范围
	 语法：元素选择器.类选择器{}
	 eg:
	    .redBack{background-color:red;}
	    div.redBack{background-color:pink;}
      5、id选择器
         作用：匹配 页面中指定id值得元素的样式
	 .bea{
		background-color:blue;
		color:red;
	 }

	 <div id="menu" class="bea"> </div>
	 语法：#idValue{}
	 eg:
	 #menu{
		color:red;
		background-color:blue;
	 }

	 <div> id="menu">...</div>
      6、群组选择器
         以 , 隔开的选择器列表
	 作用：定义一组选择器的公共样式
	 语法：选择器1,选择器2,选择器3 ...{}
	 eg:
	   div,p,span,#menu,.big{
		font-size:24px;
	   }
      7、后代选择器
         通过标签的 上下文关系(父子级关系) 来声明定义样式
	 爹的儿子 可以称为 子代 或 后代
	 爹的孙子以及以下辈分 只能叫 后代
	 语法：选择器1 选择器2{}
	 eg:
	 /*所有 div 元素 里 所有的p元素*/
	 div p{
	   
	 }
	 /*id为message的元素 里 所有的 p元素 */
	 #message p{
		
	 }

	 #message .important{
		
	 }
	 注意：不强调层级关系
      8、子代选择器
         要求选择器之间只能存在 父子关系
	 语法：选择器1>选择器2
	 注意：子代选择器，只向下找一级，多了不管
	 eg:
	 /*匹配 id 为message 元素 下一级的 所有div元素*/
	 #message>div{
		
	 }
	 /*匹配 id 为 message 的元素中 下一级 class为 important的元素中 下一级的 div 元素*/
	 #message>.important>div{
		
	 }
      9、伪类选择器
         1、作用：匹配元素 不同的状态
	 2、伪类选择器 分类
	    1、链接伪类 
	    2、动态伪类

	    3、目标伪类
	    4、元素状态伪类
	    5、结构伪类 
	    6、否定伪类
	 3、语法规范
	    :伪类选择器{}
	    
	    1、链接伪类
	       :link 匹配 尚未访问的 超链接
	       :visited 匹配 访问过的 超链接
	    2、动态伪类
	       :hover 匹配 鼠标悬停在 html元素上的状态
	       :active 匹配 元素被激活时的状态
	       :focus 匹配 元素获取 焦点时的状态(text,password)
	 注意：
	    对于超链接的伪类设置 ，一般情况下只设置 两种选择器即可
	      1、该标记的默认样式
	      2、鼠标移入到该标记的样式
   3、选择器优先级
      选择器 权值 
      标签选择器     1
      类选择器       10
      伪类选择器     10
      ID选择器       100
      内联样式       1000

      如果选择器冲突的时候， 最终以 权值相加 大者为主

3、尺寸与边框
   1、单位
   2、尺寸
      多表示 元素的宽和高,取值为数字，单位为 px 或 %
      1、宽度
         属性：width

	       min-width
	       max-width
      2、高度
         属性：height
		
	       min-height
	       max-height
      3、溢出
         设置元素尺寸时，并且 元素中的内容 的所占空间超出元素本身的话，会导致内容溢出。
	 属性：overflow
	       overflow-x : 横向溢出处理
	       overflow-y : 纵向溢出处理 
	 取值：
		1、visible 
		   默认值，溢出可见
		2、hidden
		   隐藏
		3、scroll
		   滚动条，在元素中增加滚动条，溢出时可用，不溢出，则不可用
		4、auto
		   自动，溢出时显示滚动条，不溢出是不显示滚动条
		  

      注意：
         1、块级元素 允许设置 尺寸属性
	 2、具备 width height 属性的 html 元素
	    img,table,input
	 3、行内元素 不允许设置 尺寸属性2016/3/102016/3/10
   3、边框
      1、边框
         1、简写方式
	    border:width style color;
	      width:边框线条的尺寸，值越大越明显 ，以px为单位
	      style:边框线条样式，取值:solid(实线),dotted(虚线),dashed(虚线)
	      color:颜色，
	    该属性 设置 四个边框的 宽度 样式 颜色
	 2、单边定义
	    border-left/right/top/bottom:width style color;

	    border-方向:width style color;
	    方向：left/right/top/bottom
	 3、单属性定义
	    border-width:四条边宽度
	    border-style:四条边样式
	    border-color:四条边颜色
	 4、单边单属性
	    border-方向-属性 :
	     方向：top/bottom/left/right
	     属性：width/style/color
	 注意： 
	    1、边框颜色 ，可取值为 transparent(透明)
	 
	 边框的组成  是由 四个 三角形 或 梯形组成的
    2、边框倒角
       圆角矩形
       属性：border-radius
       取值：以px为单位的数字 或 %

       单独定义：
         border-top-left-radius:左上
	 border-top-right-radius:右上
	 border-bottom-left-radius:左下
	 border-bottom-right-radius:右下
    3、边框阴影
       属性：box-shadow
       取值：由多个值组成的值列表
       box-shadow:h-shadow v-shadow blur spread color inset;

       h-shadow:阴影水平投射距离，值为正 向右偏，值为负 向左偏(必须)
       v-shadow:阴影垂直投射距离，值为正 向下偏，值为负 向上偏(必须)
       blur : 可选 ，模糊距离
       spread : 可选，阴影尺寸
       color ：可选，颜色
       inset ：可选，将默认的外部阴影 改为 内部阴影

       常用场合：模拟边框发光效果
       box-shadow:0px 0px 1px color;
   4、轮廓
      绘制于元素边框之外的一条线
      属性:outline
      取值：width style color;

      outline:width style color;

      outline:0px;
      outline:none;
1、框模型
   1、框
      框就是个容器，目的为了承装其他的东西
      html中所有的元素都可以称之为 框
   2、框模型
      Box Model : 也称为盒子模型
      定义了元素框 处理元素内容尺寸、内边距、边框 和 外边距的方式

      元素内容尺寸 ： width , height
        div{
		width:100px;
		height:100px;
	}
       边框：border
       div{
	  border:1px solid #ddd;
       }

       注意：当框模型(内边距，外边距，边框)介入到元素后，元素的 内容区域 尺寸是不变的，但是会增加元素框的总尺寸
       元素总宽度 = 左右外边距 + 左右边框 + 左右内边距 + width;
       元素总高度 = 上下外边距 + 上下边框 + 上下内边距 + height;
       eg :
         div{
		width : 200px ;
		border: 2px solid #ddd;
		左右外边距 : 15px;
		左内边距: 8px;
		右内边距: 4px;
	 }
	 总宽度：200 + 2*2 + 15*2 + 8 + 4 = 
	         200 + 4 + 30 + 12 = 246px
   3、外边距
      1、什么是外边距
         在元素边框周围的一些空白区域，这些区域是透明的，默认情况下，是不允许被其他元素所占据的。也可以表示为 当前元素 与 其他元素之间的距离
      2、语法：
         margin:value; (四个方向的外边距)
	 单边设置：
	 margin-top : 上外边距
	 margin-bottom:下外边距
	 margin-left:左外边距
	 margin-right:右外边距

	 取值：
	   单位:
	     px
	     %
	     auto : 自动，只对 左右外边距有效,设置水平居中
	     负值 : 目的 是为了移动元素
	            margin-left:取负值，为了向左移动元素
		    margin-top :取负值，为了向上移动元素
	   
	   取值为 auto ：由浏览器自己计算外边距。左右方向取值为 auto 时，会呈现出 元素水平居中对齐显示方式（仅仅局限于块级元素，而且必须要设置宽度属性）
	   
	   取值数量：
	     margin:value; 四个方向外边距
	     margin:v1 v2; 上下   左右
	     margin:v1 v2 v3; 上   左右   下
	     margin:v1 v2 v3 v4; 上 右 下 左
      3、默认 外边距
         html元素里， 有些元素默认具备 外边距的
	 h1~h6
	 p
	 ul
	 body
	 dl,dd

	 如果程序中，不想使用默认的外边距，可以设置为 0
      4、外边距问题
         1、(垂直)外边距合并
	    当两个垂直外边距相遇时，它们将形成一个外边距，称为 外边距合并
	    合并后的外边距的高度值为两个元素中 外边距较大者的值
	 2、外边距溢出
	    父子元素中，如果设置 子元素 的上下外边距时，默认情况 会 被作用到父元素的外边距上
	    解决方式：
	    1、可以为 父元素 增加边框
	    2、增加 父元素 的 padding-top 
	       最好将 父元素的 高度 相应的 减少一部分数值
   4、内边距
      1、什么是内边距
         内容区域 与 边框之间的距离控件
	 注意：内边距 会将元素边框 撑大
      2、属性
         padding : value;
	 padding-top:
	 padding-bottom:
	 padding-right:
	 padding-left:

	 取值：
	    单位：
	       px
	       %
	    数量：
	      padding:value ; 上下左右
	      padding:v1 v2 ; 上下 左右
	      padding:v1 v2 v3;上  左右  下
	      padding:v1 v2 v3 v4;上 右 下 左
2、背景
   1、背景颜色
      属性：background-color
      取值：可设置为合法的值 或  transparent
      注意：默认情况下，背景(颜色、图像)是从边框位置处就开始填充
   2、背景图片
      属性：background-image
      取值：url("图像URL")
      background-image:url("xxxx/xxx.jpg");
      background-image:url('xxxx/xxx.jpg');
      background-image:url(xxxx/xxx.jpg);
   3、背景平铺
      属性：background-repeat
      取值：
	    repeat : 即水平方向又垂直方向平铺(默认值)
	    no-repeat : 没有平铺
	    repeat-x : 仅水平方向平铺
	    repeat-y : 仅垂直方向平铺 
   4、背景图片尺寸
      属性：background-size
      取值：
            value1  value2 : 宽度 高度
	    value1%  value2% : 父容器的宽和高的占比
	    cover : 覆盖，将背景图像扩展至足够大，直到背景图已经覆盖了元素的所有区域.有可能导致背景图不能完整的显示在元素中
	    contain: 包含，将背景图扩大，直到背景图已经碰都某一个边缘位置（右、下）,背景图能够完完整整的显示在元素中，不一定能覆盖到所有的区域
   5、背景图片固定
      属性：background-attachment
      取值：
            scroll ：背景 会随文档发生滚动
	    fixed : 固定 ， 背景不会随着内容而发生滚动
   6、背景定位
      改变背景图片在元素中的位置
      属性：background-position
      取值：
            x  y : x水平偏移位置,值为正 向右移动，值为负，向左移动
	           y垂直偏移位置,值为正 向下移动，值为负，向上移动
            x% y% : 
	            左上角 : 0% 0%
		    右下角 : 100% 100%
		    居中显示 : 50% 50%
	    关键字：
	         x : left,center,right
		 y : top,center,bottom
      CSS Sprite : 将多个背景图合并到一张里面去，根据需求情况，通过 背景定位 对背景图片进行偏移，从而找到要显示的图像
   7、背景属性
      将  以上 几个属性全部综合到一起,通过一个属性描述所有的值
      属性:background
      取值：color url() repeat attachment position;
      常用值：
        background:url() reapeat position;
	
	background-image:url(Images/user.png);
	background-repeat:no-repeat;
	background-position:right center;

	background:url(Images/user.png) no-repeat right center;

3、渐变
   1、渐变语法：
      属性：background-image
      取值：
            linear-gradient()  -- 线性渐变
	    radial-gradient()  -- 径向渐变
	    repeating-linear-gradient() -- 重复线性渐变
	    repeating-radial-gradient() -- 重复径向渐变




	    background-image:url();  -- 显示背景图像
	    background-image:linear-gradient(); -- 显示线性渐变颜色
   2、线性渐变
      属性：background-image
      取值:linear-gradient(angle,color-point1,color-point2,...)

      angle:方向(角度)
         to top : 向上  --> 0deg
	 to right : 向右 --> 90deg
	 to bottom : 向下 --> 180deg
	 to left : 向左 --> 270deg
      color-point :
         表示颜色的数值 和 位置
	 red 10px
	 red 0% 

      background-image:linear-gradient(to top,red 0%,green 50%,blue 100%);
   3、径向渐变
      属性：background-image
      取值: radial-gradient();
        radial-gradient([size at position],color-point1,color-point2,....);

	size at postion : 
	   可以省略不写
	   size : 标识的圆的半径 以 px 为单位
	   position : 圆心的位置
	      top,left,right,bottom,center 
	      具体数值
	      百分比
   4、重复渐变
      repeating-linear-gradient(angle,color-point);
      color-point:
        位置 取具体的数值或者 不到 100% 的 数字
      repeating-radial-gradient();
1、文本格式化(重要)
   1、字体属性
      1、指定字体(非重要)
         font-family:value1,value2,value3....;
	 font-family:"微软雅黑","宋体","Arial";
      2、字体大小(重要)
         font-size:
	 取值 ： px 或 pt 作为单位的值
      3、字体加粗(非重要)
         相当于 : <b></b>
         font-weight:normal/bold/无单位数字;

	 无单位数字：400  - normal
	             900  - bold
      4、字体样式(非重要)
         相当于 ：<i></i>
	 功能：斜体 显示文字
	 font-style : normal / italic;
      5、小型大写字母(非重要)
         font-variant:normal/small-caps;

      6、字体属性
         font:font-style font-variant font-weight font-size font-family;

	 常用设置方式：
	   font:12px "微软雅黑","Arial";
	   font:12px/24px "microsoft yahei";

	   font:font-size/line-height "微软雅黑";
	                     行高
   2、文本属性
      1、文本颜色 (重要)
         color:value;
      2、文本水平排列方式(重要)
         相当于：html 属性中的 align
	 text-align:left / right / center

	 功能：能够控制 当前元素内 所有的文本、行内元素、行内块、水平对齐方式。
      3、文字线条修饰
         属性：text-decoration
	 取值：
	       none 无线条(重要)
	       underline 下划线(重要)

	       overline 上划线(非重点)
	       line-through 删除线(非重点) --> <s></s>
      4、行高(重要)
         一行文本所占据的高度是多少
	 如果 行高 大于 文本大小的话，那么这行文字将呈现出垂直居中的显示方式
	 属性：line-height
	 取值：以 px 为单位的值
      5、首行文本缩进(非重要)
         属性：text-indent
	 取值：以 px 为单位的值
      6、文本阴影(非重要)
         text-shadow:h-shadow v-shadow blur color;
	 h-shadow:水平投射距离
	 v-shadow:垂直投射距离
	 blur:模糊距离
	 color:颜色
******************************************************
1、表格 属性
   1、表格常用属性(重点)
      1、内边距 : padding
      2、尺寸属性 ：width,height
      3、文本属性 : font-* , text-*
      4、背景属性 : background-*
      5、边框 : border
      6、vertical-align
         功能：控制单元格内容的垂直对齐方式
	 取值：top / middle / bottom
   2、表格特有属性
      注意：该组属性只能在 table 中使用
      1、边框合并(重要)
         属性：border-collapse
	 功能：合并两个相邻的边框
	 取值：
	     separate : 默认值，分离边框
	     collapse : 合并
      2、边框边距(非重点)
         两个边框间的 上下  和  左右的距离
	 注意：只有在 border-collapse:separate;时才有效
	 属性：border-spacing
	 取值：
	      取一个值：每两个单元格之间的垂直和水平间距是一致的。
	      取两个值：第一个值，指定的是水平间距，第二个值，指定的是垂直间距。两个值用 空格 隔开
      3、显示规则(非重点)
         属性：table-layout
	 取值：
	      auto : 列宽度由内容来决定，默认值。自动表格布局
	      fixed: 列宽度由设置的值来决定。固定表格布局
	 自动表格布局：
	     单元格的大小会适应内容的大小
	     加载时较慢
	     适用于不确定每列大小时使用
	 固定表格布局：
	     列宽度取决于设置好的相关属性值，与内容无关
	     会加速显示表格，每次加载表格时不用计算
	 
	 固定表格布局虽然速度较快，但是不够灵活，不能体现出表格的特点。
	 自动表格布局，虽然算法较慢，但是是传统表格的体现
2、浮动定位
   1、定位
      元素框 相对于其正常位置 应该出现的 位置在哪

      分类：
      1、普通流定位
         流：排列元素的一种方式
	 又称为 文档流定位 ，是页面默认排列元素的一种方式。
	 页面中的块级元素：元素是从上到下的方式排列
	 页面中的行内元素：元素是从左到右的方式排列

	 弊端：块级元素 无法 一行内显示多个，布局不好做。
      2、浮动定位
         解决问题：让多个块级元素能够在一行内显示
      
      3、相对定位
      4、绝对定位
      5、固定定位
   2、浮动定位
      解决问题：让多个块级元素能够在一行内显示
      1、什么是浮动定位
         1、将元素排除在文档流之外，即元素脱离文档流。不受 默认排列方式(从上到下 或 从左到右)的控制
	 2、元素将不再占用页面的空间
	    有可能会压住其他的元素
	 3、元素 会停靠在包含框的左边 或 右边，或者停靠在已经浮动的元素的左边 或 右边
	 4、元素无论怎么浮动，最终还是在包含框之内
      2、浮动属性
         属性：float
	 取值：none / left / right;

	 注意：
	    1、块级元素浮动后 ，宽度会变成自适应
	    2、行内元素 浮动起来后，除具备以上特点外，它将变成块级元素 
      3、清除浮动
         功能：清除当前元素的左边(上边) 或 右边 已浮动元素对它所带来的影响
	 属性：clear
	 取值：left / right / both / none
      4、float 与 overflow
         原因：浮动元素 会对 父元素的高度带来影响，父元素的高度，最终以没有浮动元素的高度为准。

	 解决方案：
	 1、手动设置元素的高度
	    弊端：自适应高度时无法使用
	 2、通过 overflow 属性改变
	    overflow:hidden;放在 包含浮动元素的父元素中，它会撑起当前元素的高度，变得自适应
	    弊端：能够隐藏超出范围的元素
	 3、在父元素内最后位置处，追加一个子元素 div，增加 clear:both;属性即可
1、显示
   1、显示方式(重点)
      功能：可以通过 display 属性 修改元素框的显示方式
      属性：display
      取值：
           none : 让生成的元素没有框
	          让元素脱离文档流
		  不显示元素(隐藏)

		  隐藏元素，并且不占据页面空间
	   block : 让元素 像块级一样显示
	           使用场合：将行内元素 改变成块级元素
	   inline : 让元素 像行内元素一样去显示
	           注意：不要将块级元素 改成 行内元素
	   inline-block : 让元素显示的向 行内块 一样
	           本身是行内元素：一行内能够显示多个
		   具备块级元素特点：允许改宽和高
	   table : 让元素 显示的和 table 一样
       总结：display 常用方式
          1、隐藏元素 以及 显示元素
	     可以通过 display:none的方式隐藏
	     如果需要显示的话，按照自己默认的方式显示出来即可
	     比如：div : display:block , span : display:inline;
          2、如果程序中 ，想修改 行内元素的 尺寸时使用
	     float:left / right;
	     display:block / inline-block;
   2、显示效果
      1、可见性(非重点)
         特点：元素可以隐藏，但是空间会保留，不允许被其他元素占据
	 属性：visibility
	 取值：
	       visible : 默认值，可见的
	       hidden : 元素不可见，但保留空间
	       collapse : 用在表格元素上，删除一行或一列时，不影响表格整体布局
      2、透明度(非重点)
         属性：opacity
	 取值：0 - 1 之间的小数(能取0 也可以取1)
	       值越小，越看不清
      3、垂直对齐方式
         使用场合：
	    1、在td中使用 ：
	    2、在 img 中使用 : 控制图像两端的文本 相对于图像的垂直对齐方式
	 属性：vertical-align
	 取值：
	       top:
	       middle:
	       bottom:
	       baseline : 默认值，基线对齐，默认会将文本放在元素的基线上
	 注意：通过 修改 图像的vertical-align 为 非 baseline的值，取消默认底部的3px空白距离
   3、光标(非重点)
      属性：cursor
      取值：
            default 默认值
	    pointer : 小手(重点)
	    crosshair : +
	    text : I
	    wait : 等待 
	    help : 帮助
********************************************************
1、列表(非重点)
   功能：灵活控制或修改 列表项的显示标识
   1、list-style-type
      修改列表项前面的标识 

      属性：list-style-type
      取值：
            none ：无标记（重点）
	    disc : 实心圆
	    circle : 空心圆
	    square :实心方块 
	    decimal : 数字
	    ... ...
   2、列表项图像(非重点)
      功能：使用自定义图像，作为列表项的显示标识
      属性：list-style-image(非重点)
      取值：url(图像路径);
   3、列表项位置(非重点)
      属性:list-style-position
      取值：
           outside ：列表项标识位于 文本之外，默认值
	   inside  ：列表项标识更改在文本范围之内
   4、列表属性
      功能：将以上三个属性值 综合到一起
      属性：list-style
      取值：type url() position;
      常用写法：list-style:none;(重点)
2、定位(重点)
   1、什么是定位
      相对于其本身位置，应该出现的位置在哪
   2、定位分类
      1、普通流定位 / 文档流定位
      2、浮动定位

      3、相对定位
      4、绝对定位
      5、固定定位
   3、定位属性
      1、定位属性 
         属性：position
	 取值：static / relative / absolute  / fixed 
      2、偏移属性
         top ：
	 bottom ：
	 left ：
	 right ：

	 该组属性 能够帮助我们完成元素的位置移动
      3、堆叠顺序
         属性：z-index
	 取值：无单位的数字
   4、定位方式
      1、相对定位（重点）
         1、what
	    元素框会相对于它原来的位置偏移某个距离

	    要参考 元素本身的位置 然后去实现新的位置移动
	 2、属性 和 值
	    position:relative;

	    通过 top / left / bottom / right 属性值实现位置的微调
	 3、注意：
	    1、相对定位不会改变元素的形状
	    2、元素原本所占的控件仍然会保留
	 4、使用场合
	    1、元素本身要进行位置的微调时，优先选择相对定位
	    2、配合绝对定位一起使用(弹出菜单)
	    3、要实现堆叠顺序的调整
      2、绝对定位（重点）
         1、什么是绝对定位
	    1、绝对定位的元素会脱离文档流，不占据页面空间
	    2、相对于 最近的 已定位的祖先元素 来实现位置的初始化,如果元素没有已定位的祖先元素，那么就相对于最初的包含框body 实现位置的初始化
	 2、属性 和 值
	    position:absolute;
	    通过 top / left /  bottom / right 实现位置调整
	 3、使用场合
	    1、想实现元素堆叠的效果时使用(一个元素压住另外一个元素)
	    2、弹出菜单
      3、堆叠顺序（重点）
         已经定位的元素（尤其是绝对定位）是允许出现堆叠效果的。
	 默认的堆叠顺序
	   1、按元素出现的顺序，后来者居上(同级别)
	   2、子元素永远都会压在父元素的上面(父子级,不可变)
	 修改堆叠顺序:
	 属性：z-index
	 取值：无单位的数字，数字大者靠上
	 注意：无法修改 父子级元素的堆叠顺序

	 页面中哪些元素能够使用堆叠顺序？？已定位的元素可以使用(relative,absolute,fixed)
      4、固定定位(非重点)
         1、什么是固定定位
	    将元素固定在页面的某个位置处不动
	    会将元素脱离文档流，不占页面空间
	 2、属性 和 值 
	    position:fixed;
	    通过 left / bottom / right / top 实现位置调整
      5、静态定位(了解)
         position:static;
	 默认定位方式。
课程目标：perspective视点 transform-origin基点
(1)转换/变形――次重点transform translast位移 rotate旋转  scale缩放 skew倾斜
(2)过渡/渐变动画――重点transition property名字 duration时间 timing-function渐变样式 delay延迟
(3)帧动画――次重点@keyframes animation 
(4)CSS优化――面试题

1.CSS3高级属性――转换
  transform:  转换、变形
  语法：  
父容器 {
perspective: 视点距离;
}
选择器 {
transform: none/变形函数
transform-origin: 50% 50%;
}
  常用的2D转换函数：
(1)位移：translate(x)、translate(x, y)，无需指定轴点
(2)旋转：rotate(deg)，可以指定轴点
(3)缩放：scale(x)、scale(x,y)  1代表100%，可以指定缩放的原点
(4)倾斜：skew(xdeg)、skew(xdeg, ydeg)，可以指定倾斜的原点
  
  常用的3D转换函数：
 	注意：所有的3D转换函数都必须要配合“视点”的使用。Perspective属性必须放在执行3D转换的元素的父元素身上；单位是px――指人的眼睛距屏幕的距离。同一个3D转换，若视点越近，转换效果越夸张。

(1)3D旋转函数――重点：
rotateX(deg)单杠  rotateY(deg)钢管舞  rotateZ(deg) 
(2)3D位移函数――了解
translateZ(z)	Z轴位移效果与缩放类似
(3)3D缩放――了解
scaleZ(z)  在Z轴上进行拉伸或压缩――必须配合在X轴或Y轴旋转才能出现Z轴上的缩放效果，注意书写顺序：
transform: scaleZ(1.5) rotateX(45deg);


transform
translate()
transition

2.CSS3高级属性――过渡/渐变       
  transition：用户需要指定动画开始和结束两个点的状态，CSS3自动补全中间缺少的变化过程。如下的CSS属性都可以执行渐变动画：
・颜色属性，如background-color、color
・取值为数值的属性，如width、opacity、font-size...
・转换属性，如transform:各种转换函数
・visibility 属性
・阴影属性，box-shadow
注意：有些CSS属性是不能实现渐变动画的，如字体、背景图片...
 语法：  
选择器 {
CSS属性: 值1;
transition:  属性  持续时间;
}
选择器 {
CSS属性: 值2;
}
transition属性完整形式：transition: property duration timing-function delay;

提示：渐变动画只能提供的开始和结束两个点的状态样式，中间的过程由CSS补充――如位移：只能做直线位移。

3.CSS高级属性――关键帧(keyframe)动画
  关键帧动画：由程序员提供的一个动画过程中的若干个关键点的样式属性，每相邻的两个点中间的过渡效果由CSS补充――关键字动画比Transition动画多了很多关键点。使用方法：
  步骤一：使用 @keyframes 声明动画的关键帧
@keyframes 动画名称 {
0% {  }
xx% {  }
100% {  }
}
  步骤二：在某个选择器中使用指定的关键帧动画
选择器 {
animation:  动画名称 持续时间;
}
 动画属性：  
animation:  name  duration  timing-function  delay;
 动画子属性：
animation-name
animation-duration
animation-timing-function
animation-delay
更多的其它子属性――了解

Transition(渐变动画)和Keyframes Animation(关键帧动画)的区别：
  img {
     width: 200px;
     transition: width .15s linear;
  }
  img:hover {
     width: 400px; 
  }
  @-webkit-keyframes bianKuan {
    0% {
       width: 200px;
    }
    100% {
       width: 400px;
    }
  }
  img:hover {
     -webkit-animation:  bianKuan .15s linear;
  }
(1)transition动画简单，只能指定两个关键帧
   keyframes动画复杂，可以指定多个关键帧
(2)transition动画浏览器支持性较好
  keyframes动画目前仍需要加 -webkit- 或 -moz-前缀
(3)transition动画只能执行一次
  keyframes可以反复执行多次，并指定每次的执行方向



4.面试题――谈谈如何进行前端页面优化
  (1)HTML优化
  (2)JavaScript优化
  (3)CSS优化	
1)减少HTTP请求的次数，如把多张小图合并为一张大图――CSS Sprites。
2)所有的外部样式文件都放在页面的头部里，而不是页面的最后。
3)除首页外的其他页面尽量使用外部样式文件，被多个页面所公用。
4)首页中尽量少使用外部样式文件，全部样式写在页内部。
5)样式文件中的内容越少越精简越好，尽可能使用简称。
6)使用压缩工具压缩样式文件，如YUI-Compressor。
7)尽量不要缩放图片。