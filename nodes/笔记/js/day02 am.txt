回顾:
1. 变量
   什么是: 内存中存储一个数据的存储空间
   如何使用:
     声明: var 变量名;
	特殊: 仅声明，但未赋值的变量，默认保存undefined
     赋值: 变量名=值;
	特殊: 普通模式: 给未声明的变量赋值，不会出错。会自动创建变量并保存数据。
	      严格模式: 报错！ 
     简写: 
	1. 声明同时初始化: var 变量名=值;
	2. 同时声明并初始化多个变量: 
		var 变量1=值1,变量2=值2,...  
     取值: 任何位置，只要使用变量名等效于直接使用变量的值
	特殊: 任何情况下，只要使用未声明的变量都会报错！
	    ReferenceError
2. 数据类型:
    原始类型: 值直接保存在变量本地的简单数据类型
	number: 保存用于计算或比较的数字类型
		即可存整数，也可存浮点数
	   内存占用: 整数 4字节   浮点数 8字节
	   特殊: 舍入误差，
	     解决: 按指定小数位数四舍五入n.toFixed(d)
        string: 保存用于显示或标识的一串字符
	        必须用引号包裹，但单双引号不分
	   内存占用: unicode编码
		一个汉字：占2字节
                一个字母，数字或英文标点：占1字节
           特殊: 字符串一旦创建，内容不可改变，只能整体替换
        boolean: true   false
        undefined: undefined
        null: null
    引用类型: 值无法直接保存在变量本地的复杂类型

正课:
1. ***数据类型转换
2. ***函数
3. 分支结构

准备:
  设置空白页: 三->设置->启动时->打开特定网页...->设置网页:
		输入:about:blank->回车->点确定
  控制台常用操作: 
    1. 基本操作: 输入一条语句，按回车执行
    2. 输入多行: shift+回车
    3. 清屏: 点左上角clear图标
    4. 切换已经执行过的语句: 键盘上下键
    5. 方法字体: ctrl+鼠标滚轮

1. 数据类型转换: 
   js是弱类型语言: 要求不严格
       1. 声明变量时，不需要提前指定变量的数据类型
       2. 同一个变量，先后可保存不同类型的数据
       3. 在运行时，会根据程序自身的需要，隐式转换数据的类型
   
   隐式转换: 程序自动完成的，不需要程序员干预的数据类型转换
       算数运算: + - * / %
	   %:取余数,模运算: m%n，m除以n，取除不尽余数部分
	算数运算的返回结果，一定是一个数字
       转换规则: 默认所有值都转为数字类型number，再计算
           特殊: 1. +运算中，只要碰到字符串:
                  就统一转为字符串，+运算变为字符串拼接
		 2. bool类型: true->1  false->0
                 3. 如果参与计算的数字，无法被隐式转为number
		    则被转为NaN(not a number),无效数字
                      NaN参与任何算数计算，结果永远为NaN
   课堂练习: 
       typeof(变量名) 返回变量中保存的值的数据类型名

   强制转换: 程序员主动干预，执行的数据类型转换
   何时使用: 只要默认隐式转换的结果不是想要的，就要强制转换
       转数字: 
	任意类型 转 数字: Number(x) 
	   其实，隐式转换时，调用的就是Number函数 
           问题: 只能转换纯数字组成的字符串
        字符串 转 数字: parseInt(str); 
        何时使用: 只要将字符串转数字，都用parseInt
            原理: 从头依次读取字符串中每个字符
	          跳过开头的空字符
                  仅读取数字字符
                  碰到第一个非数字字符，就停止
            问题: 不认识小数点，只能读取整数部分，省略小数
          如果转浮点数: parseFloat(str)
	    用法和parseInt完全相同！
            只不过，多认识第一个小数点
            parseFloat也可转整数，实际开发中经常用parseFloat代替parseInt。
    
    课堂练习: 输入框:
     什么是输入框: 专门收集用户输入的数据的对话框
     如何使用: var input=prompt("提示信息")
         弹出输入框，显示"提示信息"
         用户在输入框中输入数据，点确定
         输入框返回用户输入的数据给程序的变量
     强调: 凡是从页面上获得的，都是字符串！

2. ***函数:
   什么是函数: 封装一项任务的步骤清单的代码段，再起一个名字
   为什么: 代码重用！
   何时使用: 如果一项任务，可能被反复执行
   如何使用:
       声明: 将一项任务的步骤清单定义在一个函数内
	function 函数名(参数列表){
	    步骤清单
            return 返回值;
        }
        函数名，就是任务名
        参数列表: 
          什么是参数：专门保存执行任务所必须的数据 的变量
	  何时定义： 如果一项任务，必须提供指定数据才能正常执行时，就必须定义参数。
          如何定义: 在函数名后的()中，不用var声明，直接写变量名。多个变量之间用逗号分隔。不用初始化。
        返回值: 一项任务的执行结果
          何时定义: 使用者需要获得任务的执行结果时，就要定义返回值。
	  如何定义: 在函数体的结尾，使用return 值;

       调用: 让引擎按照函数的步骤执行任务
       如何调用: var 返回值=函数名(参数值列表);







