正课
1. ES5:
   数组API:
   bind:
   严格模式: 

1. 数组API: 
   过滤和汇总:
   过滤: 从数组中筛选出符合条件的元素，组成新数组
     var sub=arr.filter(function(val,idx,arr){
	return 判断条件
     });
     只有符合判断条件的元素，才放入新数组sub中
     原数组不变。

   汇总: 依次将数组中每个元素的值，汇总出一个最后结果
     var result=arr.reduce(function(prev,val,idx,arr){
	return prev和val汇总的结果
     },base)
     其中: prev是目前为止的汇总值
           base表示初始值

2. bind: 
   call apply bind
   call vs apply:
     相同: 借用函数，并更改函数调用时的this为指定对象
     不同: 第二个参数: 
         call, 所有参数必须单独传入
         apply，所有参数必须放在一个数组内整体传入
                apply再自动打散数组，将参数传递给函数

   bind: 基于现有函数，创建一个新函数，提前将替换this的对象，绑定给新函数。
   何时使用: 基于现有函数，创建一个新函数
             并提前永久绑定this，和部分参数值时
   vs call/apply: 都是替换this
     不同: call/apply：借用: this都是临时替换
                       *调用*: 
           bind: 永久绑定this
                 为指定对象*创建*一个专属的函数副本。
   如何使用:
     1. 仅将newFun中的this绑定为obj:var newFun=fun.bind(obj);
     2. 同时给newFun提前绑定this和个别参数:
          var newFun=fun.bind(obj,param1,...);
          仅绑定部分参数。
          剩余参数需要在调用时动态传入:
          newFun(剩余参数值);

3. 严格模式:
    启用严格模式： 2个范围:
     1. 整个<script>范围内都采用严格模式:
        在<script>的顶部写: "use strict";
        何时使用: 新开发的项目，建议全用严格模式
     2. 仅在一个函数内使用严格模式: 
        在函数定义的顶部: "use strict"
        何时使用: 维护旧的项目，逐个函数向严格模式迁移
    规定: 
    1. 不允许对未声明的变量赋值
    2. 将静默失败升级为错误
    3. 严格模式下新增eval作用域: eval内声明的变量，eval结束后无法使用。
    4. 匿名函数自调中arguments.callee失效
         意味着: 匿名函数不再允许递归调用
     







