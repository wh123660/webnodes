回顾:
1. ***函数
   什么是: 一项任务的步骤清单，再起一个名字
   为什么: 代码重用
   何时使用: 只要一段代码可能被反复执行，就先定义在函数中，再调用函数
   如何使用: 
       声明: 创建一个函数，封装步骤清单
         function 函数名(参数列表){
             函数体;
             return 返回值;
         }
       参数: 专门接受函数调用时必须的数据 的变量
       何时使用: 如果函数必须提供必要数据才能正常执行时
       如何定义: 不用var，可同时定义多个，用逗号分隔每个参数
       返回值: 函数的执行结果
       何时使用: 如果函数的调用者必须得到函数的执行结果时，就要定义返回值。
       如何定义: return 值;
       强调: 函数要想向内存中返回一个结果，只能用return

       调用: *找*到函数定义，并按照函数的步骤*执行*
         var 返回值=函数名(参数值列表);
        强调: 一个函数，如果不调用，绝不执行！
              参数值，会自动赋值给函数的参数变量，用于执行
        函数的本质: 函数是一个引用类型的对象
                    函数名其实是一个引用函数对象的变量
            什么是对象: 程序中保存多个数据的整体
           
   ****范围(scope 作用域): 一个变量的可用范围
       2种：全局作用域: window 
	        全局变量: 在函数外声明的变量都是全局变量
                特点: 在任何位置都可使用
            函数作用域:
                局部变量: 在函数内声明的变量和函数的参数变量都是局部变量
	        特点: 只能在函数内使用，出了函数就不能用！

            变量的使用规则: 如果局部有，就优先使用局部的
                            局部没有，才用全局的
                            如果全局没有，才报错
   ****按值传递(byValue): 
       两种情况: 1. 两变量间赋值
                 2. 将变量作为参数传入函数时
           都是将原变量中的值，复制一个副本给对方
           修改新变量的值，不影响原变量
   
   ****声明提前(hoist):
	在程序开始执行前,
	将var声明的变量和function声明的函数
	提前到当前作用域的顶部，集中声明
        但，赋值留在原地
     鄙视时: 只要发现先使用，后声明，都是在考声明提前
             都要先转化为声明提前后的样子，再执行。

正课:
1. 分支
2. ***循环
3. *数组

程序三大结构: 顺序,分支，循环
   顺序: 程序默认都是从上向下顺序执行
   分支: 根据不同的条件，执行不同的任务
   循环: 让程序反复执行相同的任务

补: 关系运算: 做比较
	>   <   >=   <=   ==   !=
       所有关系运算返回的都是bool值(true/false)
       如果返回true，说明成立；返回false，说明不成立
      何时使用: 专门用于判断条件中
      隐式转换: 默认都转为数字，再比大小
          特殊: 如果比较的*两个值都*是字符串，
		按位比较每个字符的unicode号
      特殊: 如果参与比较的值不能被转为数字，则用NaN参与比较
           结果: NaN不大于，不小于，不等于任何值
	       NaN做不等于比较时，返回true

1. ***分支: 
   














