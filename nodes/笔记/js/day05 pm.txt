正课: 
1. ***String
   *****正则表达式
   ***检索关键词
   ***替换(删除，格式化)
   切割

1. ***String
   *****正则表达式: 
     6. 指定匹配位置: 
        ^字符串开头
        $字符串结尾
        同时前加^后加$，表示从头到尾必须完整匹配()
        何时使用: 在查找和替换中，很少使用
                  在验证中，要求从头到尾必须完整匹配，用^和$
        \b: 单词边界: 字符串开头，空字符，标点，字符串结尾
          何时使用: 专门匹配符合条件的单词
        比如: no zuo no die nothing 中
            \bno 返回3个 ――以no开头的单词
            no\b 以no结尾的单词  返回2个
            \bno\b 独立的no 返回2个
        鄙视题: 匹配首字母和结尾字母相同的单词
            首字母:\b([a-zA-Z])
            中间字母: [a-zA-Z]+
            结尾字母: \1\b
            \b([a-zA-Z])[a-zA-Z]+\1\b
          强调: 正则表达式中每个分组，自动会获得一个序号
                序号从1开始
                后边希望匹配和前边分组相同的内容可用\n匹配

        密码强度: 
	8位字母数字的组合，至少包含一位大写字母和一位数字
        预判: 从头到尾预览字符串
        1. 不全由字母组成: (?![a-zA-Z]+$)
           结论: 至少包含一位数字，还可能有特殊符号
        2. 不全由小写字母和数字组成: (?![0-9a-z]+$)
           结论: 至少包含一位大写字母，还可能包含特殊符号
        3. 只能由字母和数字组成: [0-9A-Za-z]{8}
		排除特殊符号的可能
	(?![a-zA-Z]+$)(?![0-9a-z]+$)[0-9A-Za-z]{8}

    ***检索关键字: 
      1. 查找固定关键词: var i=str.indexOf("关键词",fromi);
                    var i=str.lastIndexOf("关键词",fromi);
      2. 使用正则表达式查找： 3种
	在js中创建正则: 
            var reg=/正则表达式/后缀;
               后缀: i 忽略大小写
                     g 全部
           1. 只判断有没有: var i=str.search(reg);
              在str中找第一个和reg匹配的关键词位置
		找到返回关键词位置i
                每找到返回-1
           2. 检索所有关键词的内容，不返回位置: 
              Step1. 创建正则时，加后缀g
              Step2. var kwords=str.match(reg);
                返回值: 返回包含所有关键词内容的数组
                    ***没找到，返回null
 			一定要先判断不是null，再后续操作
                特殊: 万一正则没加g
                  match：返回一个数组: 
            [第一个敏感词,第一组子字符串,第二组子字符串,...]
	          .index属性保存了第一个敏感词的位置
           3. reg.exec();

     ***替换: (删除,格式化)
        str=str.replace(reg,"替换后的新值");
           如果替换的值和关键词无关，是固定的，用上一种方法
           如果替换值依赖于本次找到的关键词，用下一种方法
        Step1: 定义一个函数：
	   var fun=function(kword[,$1,$2,...]){
		根据本次找到的关键词kword，返回新的替换值
	   }
	Step2: 将函数对象传入replace，作为第二个参数
	   str=str.replace(reg,fun);
       
        删除: 其实就是替换成空字符串
        格式化: 2步: 
          1. 用正则将要格式化的内容分组
          2. 用替换将分组重新拼接为新的格式
	      获得第n个分组的子字符串? 在替换值内用$n
    切割: 按指定分隔符，将字符串分割为多段子字符串
	var substrs=str.split(reg);
	返回值: 子字符串组成的数组，
		分隔符不包含在结果中

    作业: 1, 11, 13, 14, 21, 22, 23













