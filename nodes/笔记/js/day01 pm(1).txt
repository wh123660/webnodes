正课:
1. 如何调试程序
2. ***变量
3. ***数据类型

1. 如何调试程序:
   bug: 程序运行过程中遇到的错误
   debug: 发现问题，并解决问题
   如何调试: 只要希望的效果没出来，先按F12，打开console
   如果程序出错，在console会提示错误的原因和位置
	回到js文件中的相同位置，修改后，重新运行

ECMAScript3.1
基本语法: 
    1. js中区分大小写
    2. 每句话结尾强烈建议用分号结束
注释:
   多行注释: /*
	       注释的内容
	     */
   单行注释: //注释的内容

2. ***变量:
   什么是变量: 内存中，存储数据的一块存储空间，再起一个名字
   何时使用: 只要一个数据，可能被反复使用，就都要先保存在变量中，再使用变量。
   如何使用: 
       声明: 在内存中开辟一块存储空间，再起一个名字 
       如何声明: var 变量名;
       强烈建议: 所有变量必须用var声明;
	特殊: 仅声明，但还未赋值，默认保存的是undefined
	什么是undefined: 所有变量的默认值
       赋值: 将数据保存到变量中
       如何赋值: 变量名=值; 
       意为: 将等号右边的值，保存到等号左边的变量中。
	特殊: 如果给未声明的变量赋值，会自动创建――强烈不建议
              预防: 在程序开始开始位置加一句: "use strict";
       简写: 声明同时就初始化变量的值:
       什么是初始化: 第一次给变量赋值
       var 变量名=值;
 
       同时声明多个变量:
       var 变量名1=值1,变量名2=值2,...;

       取值: 从变量中取出值，做运算
       如何取值: 任何位置，只要使用变量名，就等效于使用变量中的值。
	特殊: 试图从未声明的变量中取值，报错:ReferenceError:

       变量的命名: 
       建议： 1. 见名知义: 
              2. 驼峰命名: 首字母小写，之后每个单词首字母大写
       禁忌: 1. 不能以数字开头
             2. 不能使用js保留字
                什么是保留字: js已经占用的，具有特殊意义的词

    常量: 
    什么是: 一旦创建，值不可改变的量
    何时使用: 如果一个值，一旦创建，不能被修改，就要保存在常量
    如何使用: 
	创建: const 常量名=值;
	  一般常量名 全部大写！
        使用: 除了值不能改之外，其余和普通变量用法完全一样
    
3. ***数据类型: 
   什么是数据类型: 一个数据在内存中的存储格式
   为什么: 现实中不同类型的数据，都能执行不同的操作
	   不同的操作，需要专门存储格式支持。
   2大类: 
      原始类型:值直接保存在变量中 的数据类型
	5类:
         数字类型number: 程序中专门存储数字的类型
	     number可存储整数和浮点数
         何时使用: 一个数字可能用于计算或比较时
         如何使用: 程序中凡是不加引号的数字，默认都是数字类型
	 内存占用: 整数 占4字节 32位
                   浮点数 占8字节 64位
             数值大小和存储空间无关
         特殊: 
	    舍入误差：计算机中也有计算不尽的数字
                 减，乘，除都可能发生。
            无法彻底避免
            只能近似解决: 将计算结果，按指定小数位数四舍五入
                    n.toFixed(d);//d表示小数位数  
	

         字符串类型string: 程序中专门存储一串文字的类型
         何时使用: 如果一串字符仅用于显示或标识只用，就要加""
         如何使用: 程序中凡是用引号包裹的一串文字，默认是字符串。
	     字符串一般不用做计算或比较大小。
	 内存占用: js使用unicode编码保存每个字符
           什么是unicode编码: 对全球主要语言中每个字编一个号
	     练习: 获取一个字的unicode号
	   1个汉字占 2字节 
	   1个英文字母或数字，标点占 1字节
           字符串的内存占用直接取决于字符个数
         特殊: 
	   字符串的内容，一旦创建不可改变，只能整个替换。

         布尔类型boolean: 只有两个值: true/false
	 何时使用: 今后只要表示一个判断的结果，就用布尔类型
         undefined:undefined: 是所有变量的默认值
         null:null ?
      引用类型:值不直接保存在变量中 的数据类型
















